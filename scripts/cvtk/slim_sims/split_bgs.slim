function (void)write_freqs(string file, object<Subpopulation> subpop,
                     object<MutationType> mut_type, integer generation) {
  // this access sim from scope -- is this efficient?
  fmt_freqs='applyValue.id + ";" + applyValue.position + ";" + sim.mutationFrequencies(subpop, applyValue);';
  line = paste(sapply(sim.mutationsOfType(mut_type), fmt_freqs), sep="\t");
  writeFile(file, generation + "\t" + line, append=T);
}

function (float)ssh(float x) {
  return 2*sum(x * (1-x));
}

initialize() {
  defineConstant("seed", getSeed());
  defineConstant("data_dir", '../data/sims/split_bgs/');
  defineConstant("region_length", 50e6);
  // U is mutations per diploid genome.
  // U = 2 * region_length * smu 
  // U / (2 * region_length) = smu
  smu = U / (2 * region_length);
  initializeMutationRate(nmu + smu);
  initializeMutationType("m1", 0.5, "f", -s);
  initializeMutationType("m2", 0.5, "f", 0.0);
  initializeGenomicElementType("g1", c(m1, m2), c(smu, nmu));
  initializeGenomicElement(g1, 0, region_length-1);
  initializeRecombinationRate(rbp);
  m1.convertToSubstitution = T;
  m1.mutationStackPolicy = "f";
  m2.convertToSubstitution = T;
  m2.mutationStackPolicy = "f";

  // simulation results basename
  bname = ("split_bgs_" + N + "N_" +
           rbp + "rbp_" + s + "s_" +  
           nmu + "nmu_" + 
           U + "U_" + sampleN + "sampleN_");
  defineConstant("basename", bname + nrep);
  defineConstant("basename_1", basename + "_subpop1");
  defineConstant("basename_2", basename + "_subpop2");
 
  defineConstant("stats_file", data_dir + '/' + basename + '_stats.tsv');
  param_string = "#seed=" + seed + ";s=" + s + ";N=" + N + 
     	         ";rbp=" + rbp + ";region_length=" + region_length + 
                 ";nmu=" + nmu + ";sampleN=" + sampleN + 
                 ";smu=" + smu + ";U=" + U;
  writeFile(stats_file, param_string, append=F);
  writeFile(stats_file, "gen\tneut_het_1\tneut_het_2\tneut_S_1\tneut_S_2\tsel_het_1\tsel_het_2\tsel_S_1\tsel_S_2", append=T);

  // neutral freqs
  defineConstant("neutfreqs_file_1", data_dir + "/" + basename_1 + "_neutfreqs.tsv");
  defineConstant("neutfreqs_file_2", data_dir + "/" + basename_2 + "_neutfreqs.tsv");
  writeFile(neutfreqs_file_1, param_string + ";subpop=1", append=F);
  writeFile(neutfreqs_file_2, param_string + ";subpop=2", append=F);
}

1 early() {
    sim.addSubpop("p1", N);
    // --- block schedule --- 
    // whole sims: calc phenotypes to propogate breeding value in tagF
    burnin = 10*N;
    end = burnin + run_generations;
    sim.rescheduleScriptBlock(s1, start=burnin, end=burnin);
    // period over which to record neutral site frequencies. 
    // and start the two pop split
    sim.rescheduleScriptBlock(s2, start=burnin, end=end);
    // end point
    sim.rescheduleScriptBlock(s3, start=end);
}

s1 late() {
   // split the pop
   sim.addSubpopSplit("p2", sampleN, p1);
   sim.addSubpopSplit("p3", sampleN, p1);
   p1.setSubpopulationSize(0);
}

s2 late() {
   // writing neutral freqs
   write_freqs(neutfreqs_file_1, p2, m2, sim.generation);
   write_freqs(neutfreqs_file_2, p3, m2, sim.generation);

   // writing stats
   y2 = sim.mutationFrequencies(p2, sim.mutationsOfType(m2));
   neut_ssh2 = ssh(y2);
   y3 = sim.mutationFrequencies(p3, sim.mutationsOfType(m2));
   neut_ssh3 = ssh(y3);

   z2 = sim.mutationFrequencies(p2, sim.mutationsOfType(m1));
   z3 = sim.mutationFrequencies(p3, sim.mutationsOfType(m1));
   sel_ssh2 = 2*sum(z2 * (1-z2));
   sel_ssh3 = 2*sum(z3 * (1-z3));
   
   // TODO add fixed trait?
   row = paste(c(sim.generation, neut_ssh2, neut_ssh3, length(y2), length(y3),
                 sel_ssh2, sel_ssh3, length(z2), length(z3)), sep="\t");
   writeFile(stats_file, row, append=T);
  
   if (sim.generation == 10*N) {
     cat("BURNIN COMPLETE\n");
   }
}

s3 late() {
  sim.simulationFinished();
}
